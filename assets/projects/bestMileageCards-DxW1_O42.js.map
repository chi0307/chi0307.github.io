{"version":3,"file":"bestMileageCards-DxW1_O42.js","sources":["../../../src/views/projects/BestMileageCards/CreditCard/modules/Reward.ts","../../../src/views/projects/BestMileageCards/CreditCard/modules/Plan.ts","../../../src/views/projects/BestMileageCards/CreditCard/modules/type.ts","../../../src/views/projects/BestMileageCards/CreditCard/modules/Card.ts","../../../src/views/projects/BestMileageCards/CreditCard/createCard.ts","../../../src/views/projects/BestMileageCards/configs/cathay.ts","../../../src/views/projects/BestMileageCards/configs/esunbank.ts","../../../src/views/projects/BestMileageCards/configs/hsbc.ts","../../../src/views/projects/BestMileageCards/configs/index.ts","../../../src/views/projects/BestMileageCards/types.ts","../../../src/views/projects/BestMileageCards/utils.ts","../../../src/views/projects/BestMileageCards/store.ts","../../../src/views/projects/BestMileageCards/containers/CommonSettings.vue","../../../src/views/projects/BestMileageCards/containers/CreditCardManagement.vue","../../../src/views/projects/BestMileageCards/configs/storeAliases.ts","../../../src/views/projects/BestMileageCards/containers/SearchReward.vue","../../../src/views/projects/BestMileageCards/containers/StoreManagement.vue","../../../src/views/projects/BestMileageCards/App.vue","../../../src/views/projects/BestMileageCards/main.ts"],"sourcesContent":["import { roundByDigits } from '@/utils'\n\nconst round = roundByDigits(2)\n\ninterface RateItem {\n  rate: number\n  limit?: number\n}\n\ninterface BaseRewardParams<Type extends RewardType> {\n  type: Type\n  name: string | null\n  /** N 點可以換里程 */\n  pointsPerMile: number\n  /** 可以換 N 哩里程 */\n  milesPerUnit: number\n}\nabstract class BaseReward<Type extends RewardType> {\n  protected readonly _type: Type\n  protected readonly _name: string | null\n  protected readonly _pointsPerMile: number\n  protected readonly _milesPerUnit: number\n\n  public constructor({ type, name, pointsPerMile, milesPerUnit }: BaseRewardParams<Type>) {\n    this._type = type\n    this._name = name\n    this._pointsPerMile = pointsPerMile\n    this._milesPerUnit = milesPerUnit\n  }\n  /** 描述 */\n  public abstract get description(): string\n  /** 標準成本 (N元/哩) */\n  public abstract get baselineCostPerMile(): number\n  /** 最優成本 (N元/哩) */\n  public abstract get bestCaseCostPerMile(): number\n  /** 最差成本 (N元/哩) */\n  public abstract get maximumCostPerMile(): number\n  /**\n   * @param amount 金額\n   * @returns 回饋哩程\n   */\n  public abstract calculateMiles(amount: number): number\n\n  /** 回饋類型 */\n  public get type(): Type {\n    return this._type\n  }\n\n  /** 回饋名稱 */\n  public get name(): string | null {\n    return this._name\n  }\n\n  /** {{pointsPerMile}} 點換 {{ milesPerUnit }} 哩程 */\n  public get pointsPerMile(): number {\n    return this._pointsPerMile\n  }\n\n  /** {{pointsPerMile}} 點換 {{ milesPerUnit }} 哩程 */\n  public get milesPerUnit(): number {\n    return this._milesPerUnit\n  }\n\n  /** input: 點數, ouput: 里程 */\n  protected _pointsConvertToMiles(points: number): number {\n    return (points * this._milesPerUnit) / this._pointsPerMile\n  }\n\n  public calculateRangeMilesCost(\n    minAmount: number,\n    maxAmount: number,\n  ): { max: number; min: number; average: number } {\n    const list: number[] = []\n    for (let amount = minAmount; amount <= maxAmount; amount++) {\n      const data = round(amount / this.calculateMiles(amount))\n      if (isNaN(data) || data === Infinity || data === -Infinity) {\n        continue\n      }\n      list.push(data)\n    }\n    list.sort((a, b) => a - b)\n    const max = list[list.length - 1]\n    const min = list[0]\n    if (max === undefined || min === undefined) {\n      throw new Error('cannot be calculated')\n    }\n    const average =\n      list.reduce((previousValue, currentValue) => previousValue + currentValue, 0) / list.length\n    return {\n      max,\n      min,\n      average: round(average),\n    }\n  }\n\n  public abstract toJSON(): RewardConfig\n}\n\n/** 點數回饋 (N%回饋點數，四捨五入) */\nexport class RoundedPointsReward<Type extends 'RoundedPointsReward'> extends BaseReward<Type> {\n  private readonly _pointBackRates: RateItem[]\n\n  public constructor({\n    pointBackRates,\n    ...superParams\n  }: {\n    /** N% 回饋（四捨五入） */\n    pointBackRates: RateItem[]\n  } & BaseRewardParams<Type>) {\n    super(superParams)\n    this._pointBackRates = pointBackRates\n  }\n  /** N% 回饋（四捨五入） */\n  public get pointBackRates(): RateItem[] {\n    return this._pointBackRates\n  }\n  private get _maxRete(): number {\n    return this._pointBackRates.reduce((total, { rate }) => total + rate, 0)\n  }\n  public get baselineCostPerMile(): number {\n    return round(100 / this._pointsConvertToMiles(this._maxRete))\n  }\n  public get bestCaseCostPerMile(): number {\n    return round(Math.ceil(100 / this._maxRete / 2) / this._pointsConvertToMiles(1))\n  }\n  public get maximumCostPerMile(): number {\n    return round((Math.ceil(150 / this._maxRete) - 1) / this._pointsConvertToMiles(1))\n  }\n  public get description(): string {\n    return `消費${this._pointBackRates.length > 1 ? '最高' : ''}${this._maxRete.toString()}%回饋點數(四捨五入)，${this._pointsPerMile.toString()}點兌換${this._milesPerUnit.toString()}哩程`\n  }\n  public calculateMiles(amount: number): number {\n    let points = 0\n    for (const { rate, limit = Infinity } of this._pointBackRates) {\n      points += Math.min(Math.round(amount * (rate / 100)), limit)\n    }\n    return round(this._pointsConvertToMiles(points))\n  }\n  public toJSON(): RewardConfig {\n    return {\n      type: this._type,\n      name: this._name,\n      pointsPerMile: this._pointsPerMile,\n      milesPerUnit: this._milesPerUnit,\n      pointBackRates: this._pointBackRates,\n    }\n  }\n}\n\n/** 點數回饋 (N%回饋點數，無條件捨去) */\nexport class TruncatedPointsReward<Type extends 'TruncatedPointsReward'> extends BaseReward<Type> {\n  private readonly _pointBackRates: RateItem[]\n\n  public constructor({\n    pointBackRates,\n    ...superParams\n  }: {\n    /** N% 回饋（無條件捨去） */\n    pointBackRates: RateItem[]\n  } & BaseRewardParams<Type>) {\n    super(superParams)\n    this._pointBackRates = pointBackRates\n  }\n  /** N% 回饋（無條件捨去） */\n  public get pointBackRates(): RateItem[] {\n    return this._pointBackRates\n  }\n  private get _maxRete(): number {\n    return this._pointBackRates.reduce((total, { rate }) => total + rate, 0)\n  }\n  public get baselineCostPerMile(): number {\n    return round(100 / this._pointsConvertToMiles(this._maxRete))\n  }\n  public get bestCaseCostPerMile(): number {\n    return this.baselineCostPerMile\n  }\n  public get maximumCostPerMile(): number {\n    return round((Math.ceil(200 / this._maxRete) - 1) / this._pointsConvertToMiles(1))\n  }\n  public get description(): string {\n    return `消費${this._pointBackRates.length > 1 ? '最高' : ''}${this._maxRete.toString()}%回饋點數(無條件捨去)，${this._pointsPerMile.toString()}點兌換${this._milesPerUnit.toString()}哩程`\n  }\n  public calculateMiles(amount: number): number {\n    let points = 0\n    for (const { rate, limit = Infinity } of this._pointBackRates) {\n      points += Math.min(Math.floor(amount * (rate / 100)), limit)\n    }\n    return round(this._pointsConvertToMiles(points))\n  }\n  public toJSON(): RewardConfig {\n    return {\n      type: this._type,\n      name: this._name,\n      pointsPerMile: this._pointsPerMile,\n      milesPerUnit: this._milesPerUnit,\n      pointBackRates: this._pointBackRates,\n    }\n  }\n}\n\n/** 點數回饋 (消費N元累積一點) */\nexport class PointsRewardPerThreshold<\n  Type extends 'PointsRewardPerThreshold',\n> extends BaseReward<Type> {\n  private readonly _spendingPerPoint: number\n\n  public constructor({\n    spendingPerPoint,\n    ...superParams\n  }: {\n    /** N 元累積一點 */\n    spendingPerPoint: number\n  } & BaseRewardParams<Type>) {\n    super(superParams)\n    this._spendingPerPoint = spendingPerPoint\n  }\n  /** N 元累積一點 */\n  public get spendingPerPoint(): number {\n    return this._spendingPerPoint\n  }\n  public get baselineCostPerMile(): number {\n    return round(this._spendingPerPoint / this._pointsConvertToMiles(1))\n  }\n  public get bestCaseCostPerMile(): number {\n    return this.baselineCostPerMile\n  }\n  public get maximumCostPerMile(): number {\n    return round((this._spendingPerPoint * 2 - 1) / this._pointsConvertToMiles(1))\n  }\n  public get description(): string {\n    return `每消費${this._spendingPerPoint.toString()}元累積1點，${this._pointsPerMile.toString()}點兌換${this._milesPerUnit.toString()}哩程`\n  }\n  public calculateMiles(amount: number): number {\n    const points = Math.floor(amount / this._spendingPerPoint)\n    return round(this._pointsConvertToMiles(points))\n  }\n  public toJSON(): RewardConfig {\n    return {\n      type: this._type,\n      name: this._name,\n      pointsPerMile: this._pointsPerMile,\n      milesPerUnit: this._milesPerUnit,\n      spendingPerPoint: this._spendingPerPoint,\n    }\n  }\n}\n\n/** 哩程回饋 (消費 N 元哩程回饋，累積) */\nexport class CumulativeMilesReward<Type extends 'CumulativeMilesReward'> extends BaseReward<Type> {\n  private readonly _spendingPerMile: number\n\n  public constructor({\n    spendingPerMile,\n    ...superParams\n  }: {\n    /** N 元一哩 */\n    spendingPerMile: number\n  } & Omit<BaseRewardParams<Type>, 'pointsPerMile' | 'milesPerUnit'>) {\n    super({ ...superParams, pointsPerMile: 1, milesPerUnit: 1 })\n    this._spendingPerMile = spendingPerMile\n  }\n  /** N 元一哩 */\n  public get spendingPerMile(): number {\n    return this._spendingPerMile\n  }\n  public get baselineCostPerMile(): number {\n    return this._spendingPerMile\n  }\n  public get bestCaseCostPerMile(): number {\n    return this.baselineCostPerMile\n  }\n  public get maximumCostPerMile(): number {\n    return this.baselineCostPerMile\n  }\n  public get description(): string {\n    return `每消費${this._spendingPerMile.toString()}元累積1哩程 (小數會進行累計)`\n  }\n  public calculateMiles(amount: number): number {\n    return round(amount / this._spendingPerMile)\n  }\n  public toJSON(): RewardConfig {\n    return {\n      type: this._type,\n      name: this._name,\n      spendingPerMile: this._spendingPerMile,\n    }\n  }\n}\n\n/** 哩程回饋 (消費 N 元哩程回饋) */\nexport class DirectMilesReward<Type extends 'DirectMilesReward'> extends BaseReward<Type> {\n  private readonly _spendingPerMile: number\n\n  public constructor({\n    spendingPerMile,\n    ...superParams\n  }: {\n    /** N 元一哩 */\n    spendingPerMile: number\n  } & Omit<BaseRewardParams<Type>, 'pointsPerMile' | 'milesPerUnit'>) {\n    super({ ...superParams, pointsPerMile: 1, milesPerUnit: 1 })\n    this._spendingPerMile = spendingPerMile\n  }\n  /** N 元一哩 */\n  public get spendingPerMile(): number {\n    return this._spendingPerMile\n  }\n  public get baselineCostPerMile(): number {\n    return this._spendingPerMile\n  }\n  public get bestCaseCostPerMile(): number {\n    return this.baselineCostPerMile\n  }\n  public get maximumCostPerMile(): number {\n    return this._spendingPerMile + this._spendingPerMile - 1\n  }\n  public get description(): string {\n    return `每消費${this._spendingPerMile.toString()}元累積1哩程 (小數不累計)`\n  }\n  public calculateMiles(amount: number): number {\n    return Math.floor(amount / this._spendingPerMile)\n  }\n  public toJSON(): RewardConfig {\n    return {\n      type: this._type,\n      name: this._name,\n      spendingPerMile: this._spendingPerMile,\n    }\n  }\n}\n\nconst rewards = {\n  RoundedPointsReward,\n  TruncatedPointsReward,\n  PointsRewardPerThreshold,\n  CumulativeMilesReward,\n  DirectMilesReward,\n} as const\nexport type RewardType = keyof typeof rewards\nexport type Reward<Type extends RewardType> = InstanceType<(typeof rewards)[Type]>\nexport type RewardConfig = ConstructorParameters<(typeof rewards)[RewardType]>[0]\n\nexport function rewardFactory<Type extends RewardType>(\n  params: RewardConfig & { type: Type },\n): Reward<Type> {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-expect-error\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n  return new rewards[params.type](params)\n}\n","import { removeDuplicates } from '@/utils'\n\nimport { type Reward, type RewardType } from './Reward'\nimport type {\n  Payment,\n  TransactionInfo,\n  RewardMileInfo,\n  TransactionType,\n  PlanConfig,\n  ConditionType,\n  RewardRuleConfig,\n} from './type'\n\ninterface PlanReward {\n  readonly reward: Reward<RewardType>\n  readonly stores: ReadonlySet<string>\n  readonly storeBlackList: ReadonlySet<string>\n  readonly payments: ReadonlySet<Payment>\n  readonly paymentBlackList: ReadonlySet<Payment>\n  readonly transactionType: TransactionType | null\n  readonly condition: ConditionType | null\n}\n\nexport class Plan {\n  private readonly _name: string | null\n  private readonly _rewards: readonly PlanReward[]\n  private readonly _condition: ConditionType | null\n\n  public constructor(name: string | null, condition: ConditionType | null, rewards: PlanReward[]) {\n    this._name = name\n    this._condition = condition\n    if (rewards.length === 0) {\n      throw new Error(`Plan \"${name ?? 'unknown'}\" must have at least one reward rule.`)\n    }\n    this._rewards = rewards\n  }\n\n  public get name(): string | null {\n    return this._name\n  }\n\n  /** 方便在前端做選單或 autocomplete 用的 */\n  public get storeList(): string[] {\n    return removeDuplicates(this._rewards.flatMap((reward) => [...reward.stores]))\n  }\n\n  public checkPlanIsVisible(currentConditions: ConditionType[] | null): boolean {\n    return this._condition === null || Boolean(currentConditions?.includes(this._condition))\n  }\n\n  public getApplicableReward({\n    transactionStore = null,\n    acceptedPayments = [],\n    transactionAttributesType,\n    currentConditions = null,\n  }: {\n    transactionStore?: string | null | undefined\n    acceptedPayments?: Payment[] | undefined\n    transactionAttributesType: TransactionType\n    currentConditions?: ConditionType[] | null | undefined\n  }): PlanReward | null {\n    if (this._condition !== null && !currentConditions?.includes(this._condition)) {\n      return null\n    }\n    return (\n      this._rewards.find(\n        ({\n          stores,\n          payments,\n          transactionType,\n          paymentBlackList,\n          storeBlackList,\n          condition,\n        }: PlanReward): boolean => {\n          const isStoreValid =\n            transactionStore === null || stores.size === 0 || stores.has(transactionStore)\n          const isStoreNotBlackListed =\n            transactionStore === null ||\n            storeBlackList.size === 0 ||\n            !storeBlackList.has(transactionStore)\n\n          const isPaymentValid =\n            acceptedPayments.length === 0 ||\n            payments.size === 0 ||\n            acceptedPayments.some((payment) => payments.has(payment))\n          const isPaymentNotBlackListed =\n            acceptedPayments.length === 0 ||\n            paymentBlackList.size === 0 ||\n            acceptedPayments.some((item) => !paymentBlackList.has(item))\n\n          const isTransactionTypeMatch =\n            transactionType === null || transactionAttributesType === transactionType\n          const conditionValid =\n            condition === null || Boolean(currentConditions?.includes(condition))\n\n          return (\n            isStoreValid &&\n            isStoreNotBlackListed &&\n            isPaymentValid &&\n            isPaymentNotBlackListed &&\n            isTransactionTypeMatch &&\n            conditionValid\n          )\n        },\n      ) ?? null\n    )\n  }\n\n  public getRewardMiles({\n    transactionStore,\n    acceptedPayments,\n    amount,\n    transactionAttributesType,\n    currentConditions,\n  }: TransactionInfo): Pick<RewardMileInfo, 'name' | 'miles' | 'payments' | 'reward'> | null {\n    const reward = this.getApplicableReward({\n      acceptedPayments,\n      transactionStore,\n      transactionAttributesType,\n      currentConditions,\n    })\n    if (reward === null) {\n      return null\n    }\n    const payments =\n      acceptedPayments === undefined\n        ? [...reward.payments.values()]\n        : acceptedPayments.filter((item) => reward.payments.has(item))\n    return {\n      name: reward.reward.name,\n      miles: reward.reward.calculateMiles(amount),\n      payments: payments.filter((payment) => !reward.paymentBlackList.has(payment)),\n      reward: reward.reward,\n    }\n  }\n\n  public toJSON(): Required<PlanConfig> & { rewards: Required<RewardRuleConfig>[] } {\n    return {\n      name: this._name,\n      condition: this._condition,\n      rewards: this._rewards.map(\n        ({\n          reward,\n          stores,\n          payments,\n          transactionType,\n          paymentBlackList,\n          storeBlackList,\n          condition,\n        }) => ({\n          reward: reward.toJSON(),\n          stores: [...stores.values()],\n          storeBlackList: [...storeBlackList.values()],\n          payments: [...payments.values()],\n          paymentBlackList: [...paymentBlackList.values()],\n          transactionType,\n          condition,\n        }),\n      ),\n    }\n  }\n}\n","import type { DateISOString, UUID } from '@/types'\n\nimport type { Reward, RewardConfig, RewardType } from './Reward'\n\nexport const Payment = [\n  '信用卡',\n  'Apple Pay',\n  'Samsung Pay',\n  'Google Pay',\n  'Line Pay',\n  'Fitbit Pay',\n  'Garmin Pay',\n  'Hami Pay',\n  '街口支付',\n  '全盈+PAY',\n  '全支付',\n  'Pi錢包',\n  '橘子支付',\n  '歐付寶',\n  'icash pay',\n  'OPEN錢包',\n  'My FamiPay',\n  '悠遊付',\n  'ezPay',\n  'GOMAJI Pay',\n  'friday wallet',\n  'PayPal',\n  'PX Pay',\n  '中油Pay',\n  '台灣Pay',\n  '支付寶',\n] as const\nexport type Payment = (typeof Payment)[number]\nexport type TransactionType = 'Domestic' | 'Foreign'\nexport const ConditionType = ['Birthday'] as const\nexport type ConditionType = (typeof ConditionType)[number]\n\nexport const airLinesObj = {\n  SJX: '星宇航空',\n  EVA: '長榮航空',\n  ANA: '全日空',\n  JAL: '日航',\n  CPA: '國泰航空',\n  CAL: '華航',\n} as const\nexport type AirLines = keyof typeof airLinesObj\nexport const AirLines = Object.keys(airLinesObj) as AirLines[]\n\n/** input 的交易資料 */\nexport interface TransactionInfo {\n  /** 消費店家 */\n  transactionStore?: string\n  /** 支援的交易方式 */\n  acceptedPayments?: Payment[]\n  /** 交易屬性（國內交易、國外交易） */\n  transactionAttributesType: TransactionType\n  currentConditions?: ConditionType[]\n  amount: number\n}\n\n/** 回饋哩程資訊 */\nexport interface RewardMileInfo {\n  readonly planId: UUID | null\n  readonly planName: string | null\n  readonly name: string | null\n  readonly miles: number\n  readonly payments: readonly Payment[]\n  readonly reward: Reward<RewardType> | null\n}\n\nexport interface RewardRuleConfig {\n  reward: RewardConfig\n  transactionType?: TransactionType | null\n  stores?: string[]\n  storeBlackList?: string[]\n  payments?: Payment[]\n  paymentBlackList?: Payment[]\n  condition?: ConditionType | null\n}\nexport interface PlanConfig {\n  name: string | null\n  /** 回饋列表會有順序問題，前面的達成後就不會往下搜索，所以需要注意順序 */\n  rewards: RewardRuleConfig[]\n  condition?: ConditionType | null\n}\nexport interface CardConfig {\n  name: string\n  description: string\n  cardUrl: string | null\n  storeBlackList?: string[]\n  paymentBlackList?: Payment[]\n  plans: PlanConfig[]\n  /** 目標里程 */\n  airLines: AirLines\n  /** 最後更新卡片權益的時間 */\n  updateAt: DateISOString\n}\n","import type { UUID } from '@/types'\nimport { removeDuplicates } from '@/utils'\n\nimport { Plan } from './Plan'\nimport {\n  type TransactionInfo,\n  type RewardMileInfo,\n  type CardConfig,\n  type AirLines,\n  airLinesObj,\n  Payment,\n} from './type'\n\ninterface CardParams {\n  readonly name: string\n  readonly description: string\n  readonly plans: ReadonlyMap<UUID, Plan>\n  readonly cardUrl: string | null\n  readonly updateAt: Date\n  readonly airLines: AirLines\n  readonly storeBlackList: ReadonlySet<string>\n  readonly paymentBlackList: ReadonlySet<Payment>\n}\n\n// TODO\n// 之後要再想看看能怎麼實作讓 card 這邊可以吃 type, pointsPerMile, milesPerUnit 這些資料\n// 目前放在 reward 裡面可能不是好方法（畢竟目前已知的卡片都是固定回饋方式的）\nexport class CreditCard {\n  /** 當前選擇的方案 */\n  private _selectedPlanId: UUID\n  /** 卡片名稱 */\n  private readonly _name: string\n  private readonly _description: string\n  /** 全部的方案 (如果像旅人卡那樣，只有一種回饋方式這邊選項就會只有一個) */\n  private readonly _plans: ReadonlyMap<UUID, Plan>\n  /** 信用卡的銀行網頁 */\n  private readonly _cardUrl: string | null\n  /** 不回饋商店清單 */\n  private readonly _storeBlackList: ReadonlySet<string>\n  /** 不回饋支付方式清單 */\n  private readonly _paymentBlackList: ReadonlySet<Payment>\n  /** 最後更新卡片回饋設定日期（不包含切換方案等使用者設定） */\n  private readonly _updateAt: Date\n  /** 目標里程 */\n  private readonly _airLines: AirLines\n\n  public constructor({\n    name,\n    description,\n    plans,\n    storeBlackList,\n    paymentBlackList,\n    cardUrl,\n    updateAt,\n    airLines,\n  }: CardParams) {\n    this._name = name\n    this._description = description\n    this._plans = plans\n    this._cardUrl = cardUrl\n    this._storeBlackList = storeBlackList\n    this._paymentBlackList = paymentBlackList\n    this._updateAt = updateAt\n    this._airLines = airLines\n\n    const firstPlanKey = this._plans.keys().next().value\n    if (this._plans.size === 0 || firstPlanKey === undefined) {\n      throw new Error('this credit card no any plan')\n    }\n    this._selectedPlanId = firstPlanKey\n  }\n\n  public get airLines(): string {\n    return airLinesObj[this._airLines]\n  }\n\n  public get airLinesCode(): string {\n    return this._airLines\n  }\n\n  public get selectedPlan(): Plan {\n    return this._getPlan(this._selectedPlanId)\n  }\n\n  public get name(): string {\n    return this._name\n  }\n\n  public get description(): string {\n    return this._description\n  }\n\n  public get selectedPlanId(): UUID {\n    return this._selectedPlanId\n  }\n\n  /** 回傳 uuid 跟 plan name */\n  public get selectablePlan(): { id: UUID; name: string | null }[] {\n    return [...this._plans.entries()].map(([id, { name }]) => ({ id, name }))\n  }\n\n  /** 方便在前端做選單或 autocomplete 用的 */\n  public get storeList(): string[] {\n    return removeDuplicates([\n      ...[...this._plans.values()].flatMap((plan) => plan.storeList),\n      ...this._storeBlackList,\n    ])\n  }\n\n  public get cardUrl(): string | null {\n    return this._cardUrl\n  }\n\n  public updatePlan(id: UUID): boolean {\n    const plan = this._plans.get(id)\n    if (plan) {\n      this._selectedPlanId = id\n      return true\n    }\n    return false\n  }\n\n  private _getPlan(id: UUID): Plan {\n    const plan = this._plans.get(id)\n    if (plan === undefined) {\n      throw new Error(\n        `plan id ${id} not found. Available plans: ${[...this._plans.keys()].join(', ')}`,\n      )\n    }\n    return plan\n  }\n\n  private _rewardMilesWithPlan(planId: UUID, paymentInfo: TransactionInfo): RewardMileInfo {\n    const plan = this._getPlan(planId)\n    const noneMatchRewardInfo: RewardMileInfo = {\n      planId: null,\n      planName: plan.name,\n      name: null,\n      miles: 0,\n      payments: [],\n      reward: null,\n    }\n    const inStoreBlackList =\n      paymentInfo.transactionStore !== undefined &&\n      this._storeBlackList.has(paymentInfo.transactionStore)\n    const inPaymentBlackList = paymentInfo.acceptedPayments?.some((payment) =>\n      this._paymentBlackList.has(payment),\n    )\n    if (inStoreBlackList || inPaymentBlackList) {\n      return noneMatchRewardInfo\n    }\n    const rewardInfo = plan.getRewardMiles(paymentInfo)\n    if (rewardInfo === null) {\n      return noneMatchRewardInfo\n    }\n    return {\n      planId,\n      planName: plan.name,\n      ...rewardInfo,\n    }\n  }\n\n  public currentPlanRewardMiles(paymentInfo: TransactionInfo): RewardMileInfo {\n    return this._rewardMilesWithPlan(this._selectedPlanId, paymentInfo)\n  }\n\n  public getAllPlanRewardMiles(paymentInfo: TransactionInfo): RewardMileInfo[] {\n    return [...this._plans.keys()]\n      .filter((id) => {\n        const plan = this._getPlan(id)\n        return plan.checkPlanIsVisible(paymentInfo.currentConditions ?? null)\n      })\n      .map((id) => this._rewardMilesWithPlan(id, paymentInfo))\n  }\n\n  public toJSON(): Required<CardConfig> {\n    return {\n      name: this._name,\n      description: this._description,\n      cardUrl: this._cardUrl,\n      storeBlackList: [...this._storeBlackList.values()],\n      paymentBlackList: [...this._paymentBlackList.values()],\n      plans: [...this._plans.values()].map((plan) => plan.toJSON()),\n      updateAt: this._updateAt.toISOString(),\n      airLines: this._airLines,\n    }\n  }\n}\n","import typia from 'typia'\n\nimport type { UUID } from '@/types'\nimport { generateUuid } from '@/utils'\n\nimport { CreditCard } from './modules/Card'\nimport { Plan } from './modules/Plan'\nimport { rewardFactory } from './modules/Reward'\nimport type { CardConfig } from './modules/type'\n\nexport function createCard({\n  name,\n  description,\n  storeBlackList,\n  paymentBlackList,\n  cardUrl,\n  plans: planConfigs,\n  updateAt,\n  airLines,\n}: CardConfig): CreditCard {\n  const plans = new Map<UUID, Plan>(\n    planConfigs.map(({ name, condition, rewards }) => [\n      generateUuid(),\n      new Plan(\n        name,\n        condition ?? null,\n        rewards.map(\n          ({\n            stores,\n            payments,\n            transactionType,\n            reward,\n            paymentBlackList,\n            storeBlackList,\n            condition,\n          }) => ({\n            reward: rewardFactory(reward),\n            stores: new Set(stores),\n            storeBlackList: new Set(storeBlackList),\n            payments: new Set(payments),\n            paymentBlackList: new Set(paymentBlackList),\n            transactionType: transactionType ?? null,\n            condition: condition ?? null,\n          }),\n        ),\n      ),\n    ]),\n  )\n  return new CreditCard({\n    name,\n    description,\n    plans,\n    storeBlackList: new Set(storeBlackList),\n    paymentBlackList: new Set(paymentBlackList),\n    cardUrl,\n    updateAt: new Date(updateAt),\n    airLines,\n  })\n}\n\nexport const isCardConfig = typia.createIs<CardConfig>()\n","import type { CardConfig, Payment } from '../CreditCard'\n\nconst storeBlackList: string[] = ['分期付款']\nconst paymentBlackList: Payment[] = []\n\nconst payments: Payment[] = [\n  '信用卡',\n  'Apple Pay',\n  'Samsung Pay',\n  'Google Pay',\n  'Fitbit Pay',\n  'Garmin Pay',\n  'Hami Pay',\n]\n\nfunction planSettings(\n  defaultBackRete: number,\n  pointsPerMile: number,\n  milesPerUnit: number,\n): CardConfig['plans'] {\n  const baseReward: CardConfig['plans'][number]['rewards'][number] = {\n    reward: {\n      type: 'RoundedPointsReward',\n      name: null,\n      pointBackRates: [{ rate: 0.3 }],\n      pointsPerMile,\n      milesPerUnit,\n    },\n  }\n\n  return [\n    {\n      name: '集精選',\n      rewards: [\n        {\n          reward: {\n            type: 'RoundedPointsReward',\n            name: null,\n            pointBackRates: [{ rate: 2 }],\n            pointsPerMile,\n            milesPerUnit,\n          },\n          stores: [\n            '家樂福',\n            'LOPIA台灣',\n            '全聯福利中心',\n            '台灣中油-直營',\n            '7-ELEVEN',\n            '全家便利商店',\n            'IKEA宜家家居',\n          ],\n          payments: [...payments, 'PX Pay', 'My FamiPay', 'OPEN錢包'],\n        },\n        baseReward,\n      ],\n    },\n    {\n      name: '玩數位',\n      rewards: [\n        {\n          reward: {\n            type: 'RoundedPointsReward',\n            name: null,\n            pointBackRates: [{ rate: defaultBackRete }],\n            pointsPerMile,\n            milesPerUnit,\n          },\n          stores: [\n            'App Store',\n            'Apple Music',\n            'iCloud',\n            'Apple TV+',\n            'Apple Arcade',\n            'Apple One',\n            'iTunes',\n            'Google Play',\n            'Disney+',\n            'Netflix',\n            'Spotify',\n            'KKBOX',\n            'YouTube Premium',\n            '蝦皮購物',\n            'momo購物網',\n            'PChome 24h購物(不含儲值及電子票券)',\n            '博客來',\n            '小樹購',\n            'Coupang 酷澎(台灣)',\n            '淘寶/天貓',\n          ],\n          paymentBlackList: ['Line Pay', '街口支付'],\n        },\n        { ...baseReward, storeBlackList: ['全聯福利中心'] },\n      ],\n    },\n    {\n      name: '樂饗購',\n      rewards: [\n        {\n          reward: {\n            type: 'RoundedPointsReward',\n            name: null,\n            pointBackRates: [{ rate: defaultBackRete }],\n            pointsPerMile,\n            milesPerUnit,\n          },\n          stores: [\n            '遠東SOGO百貨',\n            '遠東Garden City',\n            '太平洋百貨',\n            '新光三越',\n            'SKM Park',\n            'BELLAVITA',\n            '微風廣場',\n            '遠東百貨',\n            'Big City遠東巨城購物中心',\n            '誠品生活',\n            '環球購物中心',\n            'CITYLINK',\n            '統一時代',\n            '台北101',\n            'ATT 4 FUN',\n            '明曜百貨',\n            '京站',\n            '美麗華',\n            '大葉高島屋',\n            '比漾廣場',\n            '大江國際購物中心',\n            '中友百貨',\n            '廣三SOGO',\n            'Tiger City',\n            '勤美誠品綠園道',\n            '大魯閣新時代',\n            '耐斯廣場',\n            '南紡購物中心',\n            '夢時代',\n            '漢神百貨',\n            '漢神巨蛋',\n            'MITSUI OUTLET PARK 林口',\n            'MITSUI OUTLET PARK 台中港',\n            'MITSUI OUTLET PARK 台南',\n            'Mitsui Shopping Park LaLaport 台中',\n            '義大世界購物廣場',\n            '華泰名品城',\n            '義享天地',\n            '麗寶OUTLET Mall',\n            '秀泰生活',\n            '台茂購物中心',\n            '新月廣場',\n            '三創生活',\n            '宏匯廣場',\n            '高雄棧貳庫/大港倉',\n            'NOKE忠泰樂生活',\n            'Uber Eats (不含 Uber One)',\n            'foodpanda',\n            'foodomo',\n            '國內餐飲(不含餐券)',\n            '麥當勞',\n            '康是美',\n            '屈臣氏',\n          ],\n          payments,\n        },\n        { ...baseReward, storeBlackList: ['全聯福利中心'] },\n      ],\n    },\n    {\n      name: '趣旅行',\n      rewards: [\n        {\n          reward: {\n            type: 'RoundedPointsReward',\n            name: null,\n            pointBackRates: [{ rate: defaultBackRete }],\n            pointsPerMile,\n            milesPerUnit,\n          },\n          stores: [\n            '海外實體消費',\n            '東京迪士尼樂園',\n            '東京華納兄弟哈利波特影城',\n            '大阪環球影城(USJ)',\n            '吉卜力公園',\n            'Apple Wallet SUICA',\n            'Apple Wallet PASMO',\n            'Apple Wallet ICOCA',\n            'Uber',\n            'Grab',\n            '台灣高鐵',\n            'yoxi',\n            '台灣大車隊',\n            'iRent',\n            '和運租車',\n            '格上租車',\n            '中華航空',\n            '長榮航空',\n            '星宇航空',\n            '台灣虎航',\n            '國泰航空',\n            '樂桃航空',\n            '阿聯酋航空',\n            '酷航',\n            '捷星航空',\n            '日本航空',\n            '亞洲航空',\n            '聯合航空',\n            'ANA全日空',\n            '新加坡航空',\n            '越捷航空',\n            '大韓航空',\n            '達美航空',\n            '土耳其航空',\n            '卡達航空',\n            '法國航空',\n            '國內飯店住宿',\n            '星野集團',\n            '全球迪士尼飯店',\n            '東橫INN',\n            'KKday',\n            'Agoda',\n            'Klook',\n            'Airbnb',\n            'Hotels.com',\n            'Expedia',\n            'Booking.com',\n            'Trip.com',\n            'AsiaYo',\n            'ezTravel易遊網',\n            '雄獅旅遊',\n            '可樂旅遊',\n            '東南旅遊',\n            '五福旅遊',\n            '燦星旅遊',\n            '山富旅遊',\n            '長汎假期',\n            '鳳凰旅行社',\n            'Ezfly易飛網',\n            '理想旅遊',\n            '永利旅行社',\n            '三賀旅行社',\n            '173WIFI',\n            'JetFi mobile',\n            '威訊 WaySim',\n            'AIRSIM',\n            'SIM88',\n          ],\n          payments,\n        },\n        { ...baseReward, storeBlackList: ['全聯福利中心'] },\n      ],\n    },\n    {\n      name: '來支付',\n      rewards: [\n        {\n          reward: {\n            type: 'RoundedPointsReward',\n            name: null,\n            pointBackRates: [{ rate: 2 }],\n            pointsPerMile,\n            milesPerUnit,\n          },\n          payments: ['Line Pay'],\n        },\n        { ...baseReward, storeBlackList: ['全聯福利中心'] },\n      ],\n    },\n    {\n      name: '慶生月',\n      condition: 'Birthday',\n      rewards: [\n        {\n          reward: {\n            type: 'RoundedPointsReward',\n            name: null,\n            pointBackRates: [{ rate: 10 }],\n            pointsPerMile,\n            milesPerUnit,\n          },\n          stores: [\n            '東京迪士尼樂園',\n            '大阪環球影城(USJ)',\n            '名古屋樂高樂園',\n            '紅葉蛋糕官方網站',\n            '法朋烘焙甜點坊',\n            '興波咖啡 華山旗艦店',\n            '海底撈火鍋',\n            '輕井澤鍋物',\n            '老四川巴蜀麻辣燙',\n            '二本松涮涮屋',\n            '橋山.壽喜燒',\n            'Umai屋馬燒肉',\n            '老井極上燒肉',\n            '燒肉中山(台中大墩)',\n            '藏壽司台灣',\n            '貳樓',\n            '膳馨民間創作料理',\n            '馨苑小料理',\n            '雅室牛排 仁愛圓環店',\n            'ABV餐飲集團',\n            'WAT',\n            '臺虎精釀(信義 | 西門 | 臺中 | 啜飲室大安)',\n            'BAR Bodega',\n            'BAR MED',\n            'JiN Her 今鶴',\n            '錢櫃KTV',\n            '好樂迪KTV',\n            '星聚點KTV',\n            '享溫馨KTV',\n            'Nintendo',\n            '巴哈姆特動畫瘋',\n            '閃動格子CyberCube',\n          ],\n        },\n        {\n          reward: {\n            type: 'RoundedPointsReward',\n            name: null,\n            pointBackRates: [{ rate: 3.5 }],\n            pointsPerMile,\n            milesPerUnit,\n          },\n          stores: [\n            '新光三越',\n            'Uber Eats (不含 Uber One)',\n            'Agoda',\n            'Trip.com',\n            'Klook',\n            '國內飯店住宿',\n            '星野集團',\n            '全球迪士尼飯店',\n            '東橫INN',\n          ],\n        },\n        { ...baseReward, storeBlackList: ['全聯福利中心'] },\n      ],\n    },\n  ]\n}\n\nexport const cubeConfigs: CardConfig[] = [\n  {\n    name: 'Cube 卡',\n    description: 'Cube 卡 (Level 1) 回饋方案',\n    cardUrl: 'https://www.cathaybk.com.tw/cathaybk/personal/product/credit-card/cards/cube/',\n    storeBlackList,\n    paymentBlackList,\n    updateAt: '2024-12-01T00:00:00.000Z',\n    airLines: 'EVA',\n    plans: planSettings(2, 360, 1000),\n  },\n  {\n    name: 'Cube 卡',\n    description: 'Cube 卡 (Level 2) 回饋方案',\n    cardUrl: 'https://www.cathaybk.com.tw/cathaybk/personal/product/credit-card/cards/cube/',\n    storeBlackList,\n    paymentBlackList,\n    updateAt: '2024-12-01T00:00:00.000Z',\n    airLines: 'EVA',\n    plans: planSettings(3, 360, 1000),\n  },\n  {\n    name: 'Cube 卡',\n    description: 'Cube 卡 (Level 3) 回饋方案',\n    cardUrl: 'https://www.cathaybk.com.tw/cathaybk/personal/product/credit-card/cards/cube/',\n    storeBlackList,\n    paymentBlackList,\n    updateAt: '2024-12-01T00:00:00.000Z',\n    airLines: 'EVA',\n    plans: planSettings(3.3, 360, 1000),\n  },\n  {\n    name: 'Cube 卡',\n    description: 'Cube 卡 (Level 1) 回饋方案 + 長榮世界卡',\n    cardUrl: 'https://www.cathaybk.com.tw/cathaybk/personal/product/credit-card/cards/cube/',\n    storeBlackList,\n    paymentBlackList,\n    updateAt: '2024-12-01T00:00:00.000Z',\n    airLines: 'EVA',\n    plans: planSettings(2, 300, 1000),\n  },\n  {\n    name: 'Cube 卡',\n    description: 'Cube 卡 (Level 2) 回饋方案 + 長榮世界卡',\n    cardUrl: 'https://www.cathaybk.com.tw/cathaybk/personal/product/credit-card/cards/cube/',\n    storeBlackList,\n    paymentBlackList,\n    updateAt: '2024-12-01T00:00:00.000Z',\n    airLines: 'EVA',\n    plans: planSettings(3, 300, 1000),\n  },\n  {\n    name: 'Cube 卡',\n    description: 'Cube 卡 (Level 3) 回饋方案 + 長榮世界卡',\n    cardUrl: 'https://www.cathaybk.com.tw/cathaybk/personal/product/credit-card/cards/cube/',\n    storeBlackList,\n    paymentBlackList,\n    updateAt: '2024-12-01T00:00:00.000Z',\n    airLines: 'EVA',\n    plans: planSettings(3.3, 300, 1000),\n  },\n]\n","import type { CardConfig, Payment } from '../CreditCard'\n\nconst storeBlackList: string[] = [\n  '政府稅款',\n  '公共事業代扣繳',\n  '交通違規罰鍰',\n  '分期付款',\n  '全聯福利中心',\n  '7-ELEVEN',\n  '全家便利商店',\n]\nconst paymentBlackList: Payment[] = []\n\nexport const starLuxConfigs: CardConfig[] = [\n  {\n    name: '星宇世界卡',\n    description: '',\n    cardUrl:\n      'https://www.esunbank.com/zh-tw/personal/credit-card/intro/co-branded-card/starlux-card',\n    storeBlackList,\n    paymentBlackList,\n    airLines: 'SJX',\n    plans: [\n      {\n        name: null,\n        rewards: [\n          {\n            reward: {\n              type: 'DirectMilesReward',\n              name: '國外消費',\n              spendingPerMile: 5,\n            },\n            transactionType: 'Foreign',\n            condition: 'Birthday',\n          },\n          {\n            reward: {\n              type: 'DirectMilesReward',\n              name: '國外消費',\n              spendingPerMile: 10,\n            },\n            transactionType: 'Foreign',\n          },\n          {\n            reward: {\n              type: 'DirectMilesReward',\n              name: '國內消費',\n              spendingPerMile: 20,\n            },\n            transactionType: 'Domestic',\n          },\n        ],\n      },\n    ],\n    updateAt: new Date('2024/12/01 00:00:00').toISOString(),\n  },\n  {\n    name: '星宇商務鈦金卡',\n    description: '',\n    cardUrl:\n      'https://www.esunbank.com/zh-tw/personal/credit-card/intro/co-branded-card/starlux-card',\n    storeBlackList,\n    paymentBlackList,\n    airLines: 'SJX',\n    plans: [\n      {\n        name: null,\n        rewards: [\n          {\n            reward: {\n              type: 'DirectMilesReward',\n              name: '國外消費',\n              spendingPerMile: 7.5,\n            },\n            transactionType: 'Foreign',\n            condition: 'Birthday',\n          },\n          {\n            reward: {\n              type: 'DirectMilesReward',\n              name: '國外消費',\n              spendingPerMile: 15,\n            },\n            transactionType: 'Foreign',\n          },\n          {\n            reward: {\n              type: 'DirectMilesReward',\n              name: '國內消費',\n              spendingPerMile: 25,\n            },\n            transactionType: 'Domestic',\n          },\n        ],\n      },\n    ],\n    updateAt: new Date('2024/12/01 00:00:00').toISOString(),\n  },\n  {\n    name: '星宇鈦金卡',\n    description: '',\n    cardUrl:\n      'https://www.esunbank.com/zh-tw/personal/credit-card/intro/co-branded-card/starlux-card',\n    storeBlackList,\n    paymentBlackList,\n    airLines: 'SJX',\n    plans: [\n      {\n        name: null,\n        rewards: [\n          {\n            reward: {\n              type: 'DirectMilesReward',\n              name: '國外消費',\n              spendingPerMile: 20,\n            },\n            transactionType: 'Foreign',\n          },\n          {\n            reward: {\n              type: 'DirectMilesReward',\n              name: '國內消費',\n              spendingPerMile: 28,\n            },\n            transactionType: 'Domestic',\n          },\n        ],\n      },\n    ],\n    updateAt: new Date('2024/12/01 00:00:00').toISOString(),\n  },\n]\n\nconst uniCardStoreList = [\n  '台灣中油-直營',\n  '台灣大車隊',\n  '台鐵',\n  '高鐵',\n  'UBER',\n  'Yoxi',\n  'LINEGO',\n  '新光三越',\n  '遠東百貨',\n  '遠東SOGO百貨',\n  '誠品生活',\n  '漢神百貨',\n  '微風廣場',\n  '微風信義',\n  '微風南京',\n  '微風南山',\n  '微風台北車站',\n  '環球購物中心',\n  '台北101',\n  '華泰名品城',\n  '三井OUTLET',\n  '遠東巨城',\n  '昇恆昌',\n  '夢時代購物中心',\n  '京站',\n  '美麗華',\n  '南紡購物中心',\n  '秀泰生活',\n  '台茂購物中心',\n  'lalaport',\n  '統領廣場',\n  '采盟',\n  'UBEREATS',\n  'FOODPANDA',\n  '星巴克',\n  'EZTABLE',\n  '王品瘋美食',\n  '摩斯漢堡',\n  'FOODOMO',\n  '漢來美食',\n  '饗Joy',\n  '饗食天堂',\n  '果然匯',\n  '小福利',\n  '饗饗',\n  '旭集',\n  '開飯',\n  '饗泰多',\n  '真珠',\n  '瓦城',\n  '非常泰',\n  '大心',\n  '1010',\n  '時時香',\n  'BOBO',\n  '乾杯集團',\n  '路易莎',\n  '中華航空',\n  '長榮航空',\n  '日本航空',\n  '台灣虎航',\n  '樂桃航空',\n  '酷航',\n  '立榮航空',\n  '華信航空',\n  'Agoda',\n  'booking.com',\n  'Hotels.com',\n  'AsiaYo',\n  'Expedia',\n  'KKday',\n  'Klook',\n  '雄獅旅遊',\n  '可樂旅遊',\n  '東南旅行社',\n  'Apple直營店',\n  '小米台灣',\n  '全國電子',\n  '燦坤',\n  '迪卡儂',\n  '屈臣氏',\n  '康是美',\n  'IKEA',\n  '特力屋',\n  '特力和樂',\n  'UNIQLO',\n  'NET',\n  '大樹藥局',\n  '丁丁藥妝',\n  'momo購物網',\n  '蝦皮購物',\n  '淘寶網',\n  'Coupang酷澎',\n  '東森購物',\n  '雅虎奇摩購物中心',\n  '博客來',\n  '玉山Wallet愛心捐款-單筆捐款',\n  '玉山Wallet愛心捐款-定期定額',\n  '特斯拉',\n  'Gogoro電池資費',\n  'YouBike 2.0',\n  '日本實體',\n  '韓國實體',\n  '泰國實體',\n  '越南實體',\n  '新加坡實體',\n  '中國實體',\n  '香港實體',\n  '澳門實體',\n  '美國實體',\n  '英國實體',\n  '法國實體',\n  '德國實體',\n  '義大利實體',\n]\nconst uniCardBaseReward: CardConfig['plans'][number]['rewards'][number] = {\n  reward: {\n    type: 'TruncatedPointsReward',\n    name: null,\n    pointBackRates: [{ rate: 0.3 }, { rate: 0.7 }],\n    pointsPerMile: 200,\n    milesPerUnit: 300,\n  },\n}\nexport const uniCardConfigs: CardConfig[] = [\n  {\n    name: 'UniCard 卡',\n    description: '',\n    cardUrl: 'https://www.esunbank.com/zh-tw/personal/credit-card/intro/bank-card/unicard',\n    storeBlackList,\n    paymentBlackList,\n    airLines: 'EVA',\n    plans: [\n      {\n        name: '任意選 (需要切換店家)',\n        rewards: [\n          {\n            reward: {\n              type: 'TruncatedPointsReward',\n              name: null,\n              pointBackRates: [{ rate: 0.3 }, { rate: 0.7 }, { rate: 2.5, limit: 500 }],\n              pointsPerMile: 200,\n              milesPerUnit: 300,\n            },\n            stores: uniCardStoreList,\n            payments: ['信用卡', 'Apple Pay', 'Samsung Pay', 'Google Pay'],\n          },\n          {\n            reward: {\n              type: 'TruncatedPointsReward',\n              name: null,\n              pointBackRates: [{ rate: 0.3 }, { rate: 0.7 }, { rate: 2.5, limit: 500 }],\n              pointsPerMile: 200,\n              milesPerUnit: 300,\n            },\n            payments: ['Line Pay', '街口支付', '悠遊付', '橘子支付', 'icash pay'],\n          },\n          uniCardBaseReward,\n        ],\n      },\n      {\n        name: '簡單選',\n        rewards: [\n          {\n            reward: {\n              type: 'TruncatedPointsReward',\n              name: null,\n              pointBackRates: [{ rate: 0.3 }, { rate: 0.7 }, { rate: 2, limit: 500 }],\n              pointsPerMile: 200,\n              milesPerUnit: 300,\n            },\n            stores: uniCardStoreList,\n            payments: ['信用卡', 'Apple Pay', 'Samsung Pay', 'Google Pay'],\n          },\n          {\n            reward: {\n              type: 'TruncatedPointsReward',\n              name: null,\n              pointBackRates: [{ rate: 0.3 }, { rate: 0.7 }, { rate: 2, limit: 500 }],\n              pointsPerMile: 200,\n              milesPerUnit: 300,\n            },\n            payments: ['Line Pay', '街口支付', '悠遊付', '橘子支付', 'icash pay'],\n          },\n          uniCardBaseReward,\n        ],\n      },\n      {\n        name: 'UP選',\n        rewards: [\n          {\n            reward: {\n              type: 'TruncatedPointsReward',\n              name: null,\n              pointBackRates: [{ rate: 0.3 }, { rate: 0.7 }, { rate: 3.5, limit: 2000 }],\n              pointsPerMile: 200,\n              milesPerUnit: 300,\n            },\n            stores: uniCardStoreList,\n            payments: ['信用卡', 'Apple Pay', 'Samsung Pay', 'Google Pay'],\n          },\n          {\n            reward: {\n              type: 'TruncatedPointsReward',\n              name: null,\n              pointBackRates: [{ rate: 0.3 }, { rate: 0.7 }, { rate: 3.5, limit: 2000 }],\n              pointsPerMile: 200,\n              milesPerUnit: 300,\n            },\n            payments: ['Line Pay', '街口支付', '悠遊付', '橘子支付', 'icash pay'],\n          },\n          uniCardBaseReward,\n        ],\n      },\n    ],\n    updateAt: new Date('2024/12/01 00:00:00').toISOString(),\n  },\n]\n","import type { CardConfig, Payment } from '../CreditCard'\n\nconst storeBlackList: string[] = ['政府稅款', '公共事業代扣繳', '交通違規罰鍰', '分期付款']\nconst paymentBlackList: Payment[] = ['全盈+PAY', 'icash pay', 'OPEN錢包', 'My FamiPay']\n\nexport const travelConfigs: CardConfig[] = [\n  {\n    name: '旅人無限卡',\n    description: '',\n    cardUrl: 'https://www.hsbc.com.tw/credit-cards/products/travel/visa-infinite/',\n    storeBlackList,\n    paymentBlackList,\n    airLines: 'EVA',\n    plans: [\n      {\n        name: null,\n        rewards: [\n          {\n            reward: {\n              type: 'CumulativeMilesReward',\n              name: '國外消費',\n              spendingPerMile: 10,\n            },\n            transactionType: 'Foreign',\n          },\n          {\n            reward: {\n              type: 'CumulativeMilesReward',\n              name: '國內消費',\n              spendingPerMile: 18,\n            },\n            transactionType: 'Domestic',\n          },\n        ],\n      },\n    ],\n    updateAt: new Date('2024/12/01 00:00:00').toISOString(),\n  },\n  {\n    name: '旅人御璽卡',\n    description: '',\n    cardUrl: 'https://www.hsbc.com.tw/credit-cards/products/travel/visa-signature/',\n    storeBlackList,\n    paymentBlackList,\n    airLines: 'EVA',\n    plans: [\n      {\n        name: null,\n        rewards: [\n          {\n            reward: {\n              type: 'CumulativeMilesReward',\n              name: '國外消費',\n              spendingPerMile: 15,\n            },\n            transactionType: 'Foreign',\n          },\n          {\n            reward: {\n              type: 'CumulativeMilesReward',\n              name: '國內消費',\n              spendingPerMile: 18,\n            },\n            transactionType: 'Domestic',\n          },\n        ],\n      },\n    ],\n    updateAt: new Date('2024/12/01 00:00:00').toISOString(),\n  },\n  {\n    name: '旅人輕旅卡',\n    description: '',\n    cardUrl: 'https://www.hsbc.com.tw/credit-cards/products/travel/visa-light/',\n    storeBlackList,\n    paymentBlackList,\n    airLines: 'EVA',\n    plans: [\n      {\n        name: null,\n        rewards: [\n          {\n            reward: {\n              type: 'CumulativeMilesReward',\n              name: '國外消費',\n              spendingPerMile: 20,\n            },\n            transactionType: 'Foreign',\n          },\n          {\n            reward: {\n              type: 'CumulativeMilesReward',\n              name: '國內消費',\n              spendingPerMile: 20,\n            },\n            transactionType: 'Domestic',\n          },\n        ],\n      },\n    ],\n    updateAt: new Date('2024/12/01 00:00:00').toISOString(),\n  },\n]\n","import { isNotNullishValue } from '@/utils'\n\nimport type { CardConfig } from '../CreditCard'\nimport { cubeConfigs } from './cathay'\nimport { starLuxConfigs, uniCardConfigs } from './esunbank'\nimport { travelConfigs } from './hsbc'\n\nexport const defaultCardConfigs: CardConfig[] = [\n  travelConfigs[2],\n  cubeConfigs[4],\n  starLuxConfigs[0],\n  uniCardConfigs[0],\n].filter(isNotNullishValue)\n","import typia from 'typia'\n\nexport type ShowRewardMilesType = 'AllPlanRewardMiles' | 'CurrentPlanRewardMiles'\nexport const isShowRewardMilesType = typia.createIs<ShowRewardMilesType>()\n","import typia from 'typia'\n\nimport { CustomStorageManager } from '@/utils/StorageManager'\n\nimport { type CardConfig, type ConditionType, type Payment } from './CreditCard'\nimport { isShowRewardMilesType, type ShowRewardMilesType } from './types'\n\nexport const storageManager = new CustomStorageManager<{\n  showRewardMilesType: ShowRewardMilesType\n  commonPaymentMethods: Payment[]\n  cardConfigs: CardConfig[]\n  conditionTypes: ConditionType[]\n}>(\n  localStorage,\n  {\n    showRewardMilesType: isShowRewardMilesType,\n    commonPaymentMethods: typia.createIs<Payment[]>(),\n    cardConfigs: typia.createIs<CardConfig[]>(),\n    conditionTypes: typia.createIs<ConditionType[]>(),\n  },\n  'bestMileageCards',\n)\n","import { defineStore } from 'pinia'\nimport { computed, onMounted, readonly, ref } from 'vue'\n\nimport type { UUID } from '@/types'\nimport { generateUuid } from '@/utils'\nimport { defaultCardConfigs } from '@/views/projects/BestMileageCards/configs'\nimport type { ConditionType } from '@/views/projects/BestMileageCards/CreditCard/modules/type'\n\nimport { createCard, CreditCard, Payment, type CardConfig } from './CreditCard'\nimport { type ShowRewardMilesType } from './types'\nimport { storageManager } from './utils'\n\nexport const useBestMileageCardsStore = defineStore('BestMileageCards', () => {\n  onMounted(() => {\n    const configs = storageManager.get('cardConfigs') ?? []\n    cardConfigs.value = new Map(configs.map((config) => [generateUuid(), config]))\n  })\n\n  const showRewardMilesType = ref<ShowRewardMilesType>(\n    storageManager.get('showRewardMilesType') ?? 'AllPlanRewardMiles',\n  )\n  function updateShowRewardMilesType(type: ShowRewardMilesType): void {\n    storageManager.set('showRewardMilesType', type)\n    showRewardMilesType.value = type\n  }\n\n  const commonPaymentMethods = ref<Payment[]>(\n    storageManager.get('commonPaymentMethods') ?? ['信用卡', 'Apple Pay', 'Line Pay', '街口支付'],\n  )\n  function updateCommonPaymentMethods([...payments]: readonly Payment[]): void {\n    payments = [...new Set(payments)]\n    storageManager.set('commonPaymentMethods', payments)\n    commonPaymentMethods.value = payments\n  }\n\n  // TODO: 有空要再確認看看有沒有必要做 cache 避免浪費效能\n  const cardConfigs = ref(new Map<UUID, CardConfig>())\n  const cards = computed((): CreditCard[] => {\n    const cards =\n      cardConfigs.value.size === 0 ? defaultCardConfigs : [...cardConfigs.value.values()]\n    return cards.map((config) => createCard(config))\n  })\n  function updateCardConfig(id: UUID, config: CardConfig): void {\n    cardConfigs.value.set(id, config)\n    storageManager.set('cardConfigs', [...cardConfigs.value.values()])\n  }\n\n  const conditionTypes = ref<ConditionType[]>(storageManager.get('conditionTypes') ?? [])\n  function updateConditionTypes([...types]: readonly ConditionType[]): void {\n    conditionTypes.value = types\n    storageManager.set('conditionTypes', types)\n  }\n\n  return {\n    showRewardMilesType: readonly(showRewardMilesType),\n    updateShowRewardMilesType,\n    commonPaymentMethods: readonly(commonPaymentMethods),\n    updateCommonPaymentMethods,\n    cards,\n    updateCardConfig,\n    conditionTypes: readonly(conditionTypes),\n    updateConditionTypes,\n  }\n})\n","<template>\n  <div class=\"flex-col gap-24px my-16px\">\n    <div class=\"flex-center gap-8px\">\n      <v-label text=\"回饋顯示\" />\n      <v-radio-group\n        :model-value=\"showRewardMilesType\"\n        hide-details\n        inline\n        @update:model-value=\"\n          (item) => item !== null && bestMileageCardsStore.updateShowRewardMilesType(item)\n        \"\n      >\n        <v-radio density=\"compact\" label=\"全部方案\" value=\"AllPlanRewardMiles\" />\n        <v-radio density=\"compact\" label=\"當前方案\" value=\"CurrentPlanRewardMiles\" />\n      </v-radio-group>\n    </div>\n    <div>\n      <v-select\n        :model-value=\"commonPaymentMethods\"\n        :items=\"sortList(Payment, 'asc')\"\n        label=\"使用中的付款方式\"\n        multiple\n        hide-details\n        @update:model-value=\"\n          (list) => list !== null && bestMileageCardsStore.updateCommonPaymentMethods(list)\n        \"\n      />\n    </div>\n    <div>\n      <v-label text=\"其他設定\" />\n      <div class=\"flex mx-16px\">\n        <v-switch\n          :model-value=\"conditionTypes\"\n          label=\"生日中\"\n          value=\"Birthday\"\n          hide-details\n          color=\"blue\"\n          @update:model-value=\"\n            (list) => list !== null && bestMileageCardsStore.updateConditionTypes(list)\n          \"\n        />\n      </div>\n    </div>\n  </div>\n</template>\n<script lang=\"ts\" setup>\nimport { storeToRefs } from 'pinia'\n\nimport { sortList } from '@/utils/sorts'\n\nimport { Payment } from '../CreditCard'\nimport { useBestMileageCardsStore } from '../store'\n\nconst bestMileageCardsStore = useBestMileageCardsStore()\nconst { showRewardMilesType, commonPaymentMethods, conditionTypes } =\n  storeToRefs(bestMileageCardsStore)\n</script>\n","<template>管理信用卡的設定</template>\n","export const storeAliases: Record<string, string[]> = {\n  '7-ELEVEN': ['7-11', 'Seven Eleven', '統一超商', '小7'],\n  ANA全日空: ['ANA', '全日空', 'All Nippon Airways', 'NH'],\n  'ATT 4 FUN': ['ATT4FUN', 'ATT信義'],\n  'App Store': ['蘋果應用商店'],\n  'Apple Arcade': ['蘋果遊戲訂閱服務'],\n  'Apple Music': ['蘋果音樂', 'Apple音樂'],\n  'Apple One': ['蘋果One訂閱'],\n  'Apple TV+': ['Apple TV Plus'],\n  'Apple Wallet ICOCA': ['ICOCA電子票', 'Apple錢包ICOCA'],\n  'Apple Wallet PASMO': ['PASMO電子票', 'Apple錢包PASMO'],\n  'Apple Wallet SUICA': ['SUICA電子票', 'Apple錢包SUICA'],\n  CITYLINK: ['City Link'],\n  'Disney+': ['Disney Plus', '迪士尼+'],\n  'Google Play': ['Google應用商店'],\n  Grab: ['Grab Taxi', 'Grab叫車'],\n  'MITSUI OUTLET PARK 台中港': ['三井台中港', '三井OUTLET台中'],\n  'MITSUI OUTLET PARK 台南': ['三井台南', '三井OUTLET台南'],\n  'MITSUI OUTLET PARK 林口': ['三井林口', '三井OUTLET林口'],\n  'Mitsui Shopping Park LaLaport 台中': ['LaLaport台中', '三井LaLaport台中'],\n  Netflix: ['網飛'],\n  Nintendo: ['任天堂', 'Switch', '老任'],\n  'PChome 24h購物(不含儲值及電子票券)': ['PChome', 'PChome購物'],\n  'Tiger City': ['老虎城', 'Tiger City購物中心'],\n  'Trip.com': ['攜程'],\n  'Uber Eats (不含 Uber One)': ['優步外送'],\n  foodpanda: ['熊貓外送', 'Food Panda'],\n  iCloud: ['蘋果雲端', 'iCloud雲端'],\n  iRent: ['i Rent'],\n  iTunes: ['蘋果iTunes'],\n  中友百貨: ['中友'],\n  中華航空: ['China Airlines', 'CAL', 'CI', '華航'],\n  亞洲航空: ['AirAsia', '亞航', 'AXM', 'AK'],\n  京站: ['Q Square', '京站商場'],\n  全家便利商店: ['FamilyMart', '全家'],\n  全球迪士尼飯店: ['Disney Hotels'],\n  全聯福利中心: ['PX Mart'],\n  南紡購物中心: ['Tainan Spinnery Mall', '南紡'],\n  博客來: ['Books.com.tw'],\n  卡達航空: ['Qatar Airways', '卡航', 'QTR', 'QR'],\n  可樂旅遊: ['Cola Travel', '可樂旅行社'],\n  台北101: ['Taipei 101', '101大樓'],\n  '台灣中油-直營': ['中油直營', '直營中油'],\n  台灣大車隊: ['Taiwan Taxi', '大車隊'],\n  台灣虎航: ['Tigerair Taiwan', '台虎', 'TWA', 'IT'],\n  台灣高鐵: ['Taiwan High Speed Rail'],\n  台茂購物中心: ['TaiMall'],\n  吉卜力公園: ['Ghibli Park'],\n  國泰航空: ['Cathay Pacific', '國泰', 'CPA', 'CX', 'Cathay Pacific Airways'],\n  土耳其航空: ['Turkish Airlines', '土航', 'THY', 'TK'],\n  夢時代: ['Dream Mall'],\n  '大阪環球影城(USJ)': ['Universal Studios Japan'],\n  大韓航空: ['Korean Air', '韓航', 'KAL', 'KE'],\n  大魯閣新時代: ['Taroko Mall', '大魯閣'],\n  太平洋百貨: ['Pacific Department Store', '太平洋'],\n  好樂迪KTV: ['Holiday'],\n  家樂福: ['Carrefour'],\n  屈臣氏: ['Watsons'],\n  康是美: ['Cosmed'],\n  捷星航空: ['JST', 'JQ', 'Jetstar Airways'],\n  新加坡航空: ['SIA', 'SQ', 'Singapore Airlines'],\n  日本航空: ['JAL', 'JL', 'Japan Airlines'],\n  星宇航空: ['starlux', 'SJX', 'JX', 'STARLUX Airlines'],\n  樂桃航空: ['APJ', 'MM', 'Peach Aviation'],\n  法國航空: ['AFR', 'AF', 'Air France'],\n  聯合航空: ['UAL', 'UA', 'United Airlines'],\n  蝦皮購物: ['shopee'],\n  越捷航空: ['VJC', 'VJ', 'VietJet Air'],\n  達美航空: ['DAL', 'DL', 'Delta Air Lines'],\n  遠東百貨: ['遠百'],\n  酷航: ['SCO', 'TR', 'Scoot'],\n  長榮航空: ['EVA', 'BR', 'EVA Airlines', 'EVA Air'],\n  阿聯酋航空: ['UAE', 'EK', 'Emirates'],\n  麥當勞: [\"McDonald's\"],\n}\n","<template>\n  <div class=\"flex-col gap-8px h-full\">\n    <v-text-field\n      :model-value=\"amount\"\n      class=\"flex-grow-0\"\n      density=\"comfortable\"\n      hide-details\n      label=\"交易金額\"\n      inputmode=\"decimal\"\n      :clearable=\"amount !== 0\"\n      @update:model-value=\"\n        (numberString: string) =>\n          (amount = isNaN(parseFloat(numberString)) ? 0 : parseFloat(numberString))\n      \"\n    />\n    <v-autocomplete\n      ref=\"storeAutoComplete\"\n      v-model=\"transactionStore\"\n      :custom-filter=\"customSearchStore\"\n      class=\"flex-grow-0\"\n      density=\"comfortable\"\n      hide-details\n      item-value=\"store\"\n      item-title=\"store\"\n      label=\"消費店家\"\n      :items=\"storeList\"\n      :clearable=\"transactionStore !== ''\"\n      placeholder=\"全部店家\"\n      @update:menu=\"(status: boolean) => !status && storeAutoCompleteElement?.blur()\"\n    />\n    <div>\n      <v-label text=\"支援的付款方式\" />\n      <div class=\"flex items-center flex-wrap gap-x-8px\">\n        <v-checkbox\n          v-for=\"(payment, index) of commonPaymentMethods\"\n          :key=\"index\"\n          v-model=\"acceptedPayments\"\n          density=\"compact\"\n          :value=\"payment\"\n          hide-details\n          :label=\"payment\"\n        />\n      </div>\n    </div>\n    <div class=\"flex-center gap-8px\">\n      <v-label text=\"交易類型\" />\n      <v-radio-group v-model=\"transactionAttributesType\" hide-details inline>\n        <v-radio density=\"compact\" label=\"國內交易\" value=\"Domestic\" />\n        <v-radio density=\"compact\" label=\"國外交易\" value=\"Foreign\" />\n      </v-radio-group>\n    </div>\n    <div ref=\"rewardCardList\" class=\"gap-4px flex-col flex-grow-1 overflow-y-auto\">\n      <v-card\n        v-for=\"(item, index) of rewardMilesList\"\n        :key=\"index\"\n        density=\"compact\"\n        class=\"mx-auto w-full flex-shrink-0\"\n        variant=\"outlined\"\n        @click=\"() => (selectedRewardItem = item)\"\n      >\n        <template #title>\n          <div class=\"flex items-center justify-between\">\n            <div class=\"flex items-end gap-4px\">\n              {{ item.miles }}\n              <p class=\"text-12px opacity-50 p-4px\">{{ item.airLinesCode }}</p>\n            </div>\n            <i v-if=\"item.isSelectedPlan\" class=\"fa-solid fa-circle-check\" />\n          </div>\n        </template>\n        <template #text>\n          <div class=\"flex-col gap-8px\">\n            <p class=\"text-0.75rem\">\n              {{ `${item.cardName} ${item.planName ?? ''} ${item.rewardName ?? ''}` }}\n              {{ item.payments.length === 0 ? '' : ` (支付方式: ${item.payments.join(', ')})` }}\n            </p>\n          </div>\n        </template>\n      </v-card>\n    </div>\n  </div>\n  <v-dialog\n    :model-value=\"Boolean(selectedRewardItem)\"\n    @update:model-value=\"selectedRewardItem = null\"\n  >\n    <v-card\n      v-if=\"selectedRewardItem\"\n      class=\"mx-auto reward-detail-dialog\"\n      min-width=\"100%\"\n      :title=\"`${selectedRewardItem.cardName} ${selectedRewardItem.planName ?? ''} ${selectedRewardItem.rewardName ?? ''}`\"\n    >\n      <template #subtitle>\n        <p class=\"text-wrap\">\n          {{ selectedRewardItem.rewardDescription ?? '' }}\n        </p>\n      </template>\n      <template #text>\n        <div class=\"flex-col\">\n          <p class=\"flex justify-between\">\n            卡片說明：\n            <a\n              v-if=\"selectedRewardItem.cardUrl !== null\"\n              target=\"_blank\"\n              class=\"underline\"\n              :href=\"selectedRewardItem.cardUrl\"\n            >\n              網站\n            </a>\n          </p>\n          <p v-if=\"selectedRewardItem.description !== ''\">{{ selectedRewardItem.description }}</p>\n          <br />\n          <p>消費金額: {{ amount }}</p>\n          <p>哩程預估: {{ selectedRewardItem.miles }}&ensp;{{ selectedRewardItem.airLinesCode }}</p>\n          <br />\n          <p v-for=\"(text, index) of selectedRewardItem.calculateDetail\" :key=\"index\">\n            {{ text }}\n          </p>\n        </div>\n      </template>\n      <template #actions>\n        <v-btn class=\"ms-auto\" text=\"Close\" @click=\"selectedRewardItem = null\" />\n      </template>\n    </v-card>\n  </v-dialog>\n</template>\n<script lang=\"ts\" setup>\nimport { storeToRefs } from 'pinia'\nimport { computed, ref, useTemplateRef } from 'vue'\n\nimport { removeDuplicates } from '@/utils'\nimport { sortList, sortListByField } from '@/utils/sorts'\n\nimport { storeAliases } from '../configs/storeAliases'\nimport {\n  CreditCard,\n  type Payment,\n  type Reward,\n  type RewardMileInfo,\n  type RewardType,\n  type TransactionInfo,\n  type TransactionType,\n} from '../CreditCard'\nimport { useBestMileageCardsStore } from '../store'\n\ninterface RewardItem {\n  cardName: string\n  planName: string | null\n  rewardName: string | null\n  miles: number\n  isSelectedPlan: boolean\n  payments: readonly Payment[]\n  airLinesCode: string\n  calculateDetail: string[]\n  rewardDescription: string | null\n  cardUrl: string | null\n  description: string\n}\n\nconst { showRewardMilesType, commonPaymentMethods, cards, conditionTypes } = storeToRefs(\n  useBestMileageCardsStore(),\n)\n\nconst amount = ref<number>(0)\nconst transactionStore = ref<string>('')\nconst otherStore = '其他店家'\nconst transactionAttributesType = ref<TransactionType>('Domestic')\nconst acceptedPayments = ref<Payment[]>([])\nconst rewardCardListElement = useTemplateRef<HTMLElement>('rewardCardList')\nconst storeAutoCompleteElement = useTemplateRef<HTMLElement>('storeAutoComplete')\n\ninterface Item {\n  store: string\n  aliases?: string[]\n}\nconst storeList = computed((): Item[] => {\n  const stores = sortList(removeDuplicates(cards.value.flatMap((card) => card.storeList)), 'asc')\n  const items = stores.map((store) => ({\n    store,\n    aliases: storeAliases[store] ?? [],\n  }))\n  return [{ store: otherStore }, ...items]\n})\n\nfunction customSearchStore(\n  value: string,\n  searchQuery: string,\n  item?: { raw: Item; value: string },\n): boolean {\n  searchQuery = searchQuery.toLowerCase()\n  const list = [value, ...(item?.raw.aliases ?? [])].map((item) => item.toLowerCase())\n  return list.some((item) => item.includes(searchQuery))\n}\n\nfunction getRewardMiles(card: CreditCard, paymentInfo: TransactionInfo): RewardMileInfo[] {\n  if (showRewardMilesType.value === 'CurrentPlanRewardMiles') {\n    return [card.currentPlanRewardMiles(paymentInfo)]\n  } else {\n    return card.getAllPlanRewardMiles(paymentInfo)\n  }\n}\n\nconst rewardMilesList = computed((): RewardItem[] => {\n  const paymentInfo: TransactionInfo = {\n    amount: amount.value,\n    acceptedPayments: acceptedPayments.value,\n    transactionAttributesType: transactionAttributesType.value,\n    currentConditions: [...conditionTypes.value],\n  }\n  if (transactionStore.value !== '') {\n    paymentInfo.transactionStore = transactionStore.value\n  }\n  const list: RewardItem[] = []\n  for (const card of cards.value) {\n    if (!(card instanceof CreditCard)) {\n      continue\n    }\n    const rewardMileList = getRewardMiles(card, paymentInfo)\n    for (const item of rewardMileList) {\n      const rewardItem: RewardItem = {\n        cardName: card.name,\n        planName: item.planName,\n        rewardName: item.name,\n        miles: item.miles,\n        payments: item.payments,\n        airLinesCode: card.airLinesCode,\n        isSelectedPlan:\n          showRewardMilesType.value === 'AllPlanRewardMiles' && item.planId === card.selectedPlanId,\n        calculateDetail: getRewardDetail(item.reward),\n        rewardDescription: item.reward?.description ?? null,\n        cardUrl: card.cardUrl,\n        description: card.description,\n      }\n      list.push(rewardItem)\n    }\n  }\n  rewardCardListElement.value?.scrollTo({ top: 0, behavior: 'smooth' })\n  return sortListByField(sortListByField(list, 'isSelectedPlan', 'desc'), 'miles', 'desc')\n})\n\nconst selectedRewardItem = ref<RewardItem | null>(null)\nfunction getRewardDetail(reward: Reward<RewardType> | null): string[] {\n  const title = '回饋計算:'\n  switch (reward?.type) {\n    case 'RoundedPointsReward':\n    case 'TruncatedPointsReward': {\n      const numberFormatEvent = reward.type === 'RoundedPointsReward' ? Math.round : Math.floor\n      let totalPoints = 0\n      return [\n        title,\n        ...reward.pointBackRates.map(({ rate, limit }) => {\n          const total = Math.min(numberFormatEvent((amount.value * rate) / 100), limit ?? Infinity)\n          totalPoints += total\n          const limitString = limit !== undefined ? ` (limit ${limit})` : ''\n          return `${amount.value} * ${rate}% = ${total}${limitString}`\n        }),\n        `總計 ${totalPoints} points`,\n        `${totalPoints} / ${reward.pointsPerMile} * ${reward.milesPerUnit} = ${\n          Math.round((totalPoints / reward.pointsPerMile) * reward.milesPerUnit * 100) / 100\n        } miles`,\n      ]\n    }\n    case 'PointsRewardPerThreshold': {\n      const points = Math.floor(amount.value / reward.spendingPerPoint)\n      return [\n        title,\n        `${amount.value} / ${reward.spendingPerPoint} = ${points} points`,\n        `${points} / ${reward.pointsPerMile} * ${reward.milesPerUnit} = ${\n          Math.round((points / reward.pointsPerMile) * reward.milesPerUnit * 100) / 100\n        } miles`,\n      ]\n    }\n    case 'CumulativeMilesReward': {\n      return [\n        title,\n        `${amount.value} / ${reward.spendingPerMile} = ${Math.round((amount.value / reward.spendingPerMile) * 100) / 100}`,\n      ]\n    }\n    case 'DirectMilesReward': {\n      return [\n        title,\n        `${amount.value} / ${reward.spendingPerMile} = ${Math.floor(amount.value / reward.spendingPerMile)} (小數省略)`,\n      ]\n    }\n    default: {\n      return []\n    }\n  }\n}\n</script>\n\n<style scoped>\n.v-card p {\n  @apply line-height-none h-fit;\n}\n\n.reward-detail-dialog p {\n  @apply line-height-125%;\n}\n</style>\n","<template>\n  實作商店別名，方便查詢（目標上面做個開關，可以切換自動用專案的名詞，或是自己設定別名）\n</template>\n","<template>\n  <v-app>\n    <v-app-bar density=\"comfortable\" :elevation=\"2\">\n      <template #prepend>\n        <v-app-bar-nav-icon @click=\"openNavigation = !openNavigation\">\n          <i class=\"fa-solid fa-bars\" />\n        </v-app-bar-nav-icon>\n        <v-app-bar-title>{{ currentPage }}</v-app-bar-title>\n      </template>\n    </v-app-bar>\n    <v-navigation-drawer v-model=\"openNavigation\">\n      <template v-for=\"(item, index) of pageList\" :key=\"index\">\n        <v-list-item\n          :title=\"item\"\n          class=\"h-48px\"\n          :class=\"{ 'text-emphasis': currentPage === item }\"\n          @click=\"\n            () => {\n              currentPage = item\n              openNavigation = false\n            }\n          \"\n        />\n        <v-divider />\n      </template>\n    </v-navigation-drawer>\n    <main style=\"height: calc(100dvh - 56px)\" class=\"overflow-hidden mt-56px p-8px\">\n      <KeepAlive>\n        <component :is=\"componentList[currentPage]\" />\n      </KeepAlive>\n    </main>\n  </v-app>\n</template>\n<script lang=\"ts\" setup>\nimport { ref } from 'vue'\n\nimport CommonSettings from './containers/CommonSettings.vue'\nimport CreditCardManagement from './containers/CreditCardManagement.vue'\nimport SearchReward from './containers/SearchReward.vue'\nimport StoreManagement from './containers/StoreManagement.vue'\n\nconst componentList = {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  查詢回饋: SearchReward,\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  信用卡管理: CreditCardManagement,\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  商家管理: StoreManagement,\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  喜好設定: CommonSettings,\n} as const\ntype PageList = keyof typeof componentList\nconst pageList = Object.keys(componentList) as unknown as PageList[]\n\nconst openNavigation = ref(false)\n// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\nconst currentPage = ref<PageList>(pageList[0]!)\n</script>\n","import { createPinia } from 'pinia'\n\nimport { createBaseApp } from '@/base/index'\nimport { vuetify } from '@/base/vuetify'\n\nimport App from './App.vue'\n\n// eslint-disable-next-line @typescript-eslint/no-unsafe-argument\nconst app = createBaseApp(App)\n\napp.use(vuetify)\napp.use(createPinia())\n\napp.mount('#app')\n"],"names":["round","roundByDigits","BaseReward","type","name","pointsPerMile","milesPerUnit","__publicField","points","minAmount","maxAmount","list","amount","data","a","b","max","min","average","previousValue","currentValue","RoundedPointsReward","pointBackRates","superParams","total","rate","limit","TruncatedPointsReward","PointsRewardPerThreshold","spendingPerPoint","CumulativeMilesReward","spendingPerMile","DirectMilesReward","rewards","rewardFactory","params","Plan","condition","removeDuplicates","reward","currentConditions","transactionStore","acceptedPayments","transactionAttributesType","stores","payments","transactionType","paymentBlackList","storeBlackList","isStoreValid","isStoreNotBlackListed","isPaymentValid","payment","isPaymentNotBlackListed","item","isTransactionTypeMatch","conditionValid","Payment","airLinesObj","CreditCard","description","plans","cardUrl","updateAt","airLines","firstPlanKey","id","plan","planId","paymentInfo","noneMatchRewardInfo","inStoreBlackList","inPaymentBlackList","_a","rewardInfo","createCard","planConfigs","generateUuid","planSettings","defaultBackRete","baseReward","cubeConfigs","starLuxConfigs","uniCardStoreList","uniCardBaseReward","uniCardConfigs","travelConfigs","defaultCardConfigs","isNotNullishValue","isShowRewardMilesType","input","storageManager","CustomStorageManager","_iv2","elem","_iv4","_iv10","_iv12","_io0","_io1","_io2","_iu0","_io3","_io4","_io5","_io6","_io7","_io8","useBestMileageCardsStore","defineStore","onMounted","configs","cardConfigs","config","showRewardMilesType","ref","updateShowRewardMilesType","commonPaymentMethods","updateCommonPaymentMethods","cards","computed","updateCardConfig","conditionTypes","updateConditionTypes","types","readonly","bestMileageCardsStore","storeToRefs","_sfc_render","_ctx","_cache","storeAliases","otherStore","rewardCardListElement","useTemplateRef","storeAutoCompleteElement","storeList","items","sortList","card","store","customSearchStore","value","searchQuery","getRewardMiles","rewardMilesList","rewardMileList","rewardItem","getRewardDetail","_b","sortListByField","selectedRewardItem","title","numberFormatEvent","totalPoints","limitString","componentList","SearchReward","CreditCardManagement","StoreManagement","CommonSettings","pageList","openNavigation","currentPage","app","createBaseApp","App","vuetify","createPinia"],"mappings":"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KAAM,MACN,QAAS,CACP,CACE,OAAQ,CACN,KAAM,sBACN,KAAM,KACN,eAAgB,CAAC,CAAE,KAAMD,EAAiB,EAC1C,cAAA1E,EACA,aAAAC,CACF,EACA,OAAQ,CACN,WACA,gBACA,QACA,OACA,WACA,YACA,OACA,OACA,mBACA,OACA,SACA,WACA,OACA,QACA,YACA,OACA,KACA,MACA,QACA,OACA,WACA,OACA,SACA,aACA,UACA,SACA,OACA,SACA,MACA,OACA,OACA,wBACA,yBACA,wBACA,mCACA,WACA,QACA,OACA,gBACA,OACA,SACA,OACA,OACA,OACA,YACA,YACA,0BACA,YACA,UACA,aACA,MACA,MACA,KACF,EACA,SAAAuC,CACF,EACA,CAAE,GAAGmC,EAAY,eAAgB,CAAC,QAAQ,CAAE,CAAA,CAEhD,EACA,CACE,KAAM,MACN,QAAS,CACP,CACE,OAAQ,CACN,KAAM,sBACN,KAAM,KACN,eAAgB,CAAC,CAAE,KAAMD,EAAiB,EAC1C,cAAA1E,EACA,aAAAC,CACF,EACA,OAAQ,CACN,SACA,UACA,eACA,cACA,QACA,qBACA,qBACA,qBACA,OACA,OACA,OACA,OACA,QACA,QACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,QACA,KACA,OACA,OACA,OACA,OACA,SACA,QACA,OACA,OACA,OACA,QACA,OACA,OACA,SACA,OACA,UACA,QACA,QACA,QACA,QACA,SACA,aACA,UACA,cACA,WACA,SACA,cACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,QACA,WACA,OACA,QACA,QACA,UACA,eACA,YACA,SACA,OACF,EACA,SAAAuC,CACF,EACA,CAAE,GAAGmC,EAAY,eAAgB,CAAC,QAAQ,CAAE,CAAA,CAEhD,EACA,CACE,KAAM,MACN,QAAS,CACP,CACE,OAAQ,CACN,KAAM,sBACN,KAAM,KACN,eAAgB,CAAC,CAAE,KAAM,EAAG,EAC5B,cAAA3E,EACA,aAAAC,CACF,EACA,SAAU,CAAC,UAAU,CACvB,EACA,CAAE,GAAG0E,EAAY,eAAgB,CAAC,QAAQ,CAAE,CAAA,CAEhD,EACA,CACE,KAAM,MACN,UAAW,WACX,QAAS,CACP,CACE,OAAQ,CACN,KAAM,sBACN,KAAM,KACN,eAAgB,CAAC,CAAE,KAAM,GAAI,EAC7B,cAAA3E,EACA,aAAAC,CACF,EACA,OAAQ,CACN,UACA,cACA,UACA,WACA,UACA,aACA,QACA,QACA,WACA,SACA,SACA,WACA,SACA,aACA,QACA,KACA,WACA,QACA,aACA,UACA,MACA,6BACA,aACA,UACA,aACA,QACA,SACA,SACA,SACA,WACA,UACA,eAAA,CAEJ,EACA,CACE,OAAQ,CACN,KAAM,sBACN,KAAM,KACN,eAAgB,CAAC,CAAE,KAAM,IAAK,EAC9B,cAAAD,EACA,aAAAC,CACF,EACA,OAAQ,CACN,OACA,0BACA,QACA,WACA,QACA,SACA,OACA,UACA,OAAA,CAEJ,EACA,CAAE,GAAG0E,EAAY,eAAgB,CAAC,QAAQ,CAAE,CAAA,CAC9C,CAEJ,CACF,CAEO,MAAMC,GAA4B,CACvC,CACE,KAAM,SACN,YAAa,wBACb,QAAS,gFAAA,eACTjC,EAAA,iBACAD,EACA,SAAU,2BACV,SAAU,MACV,MAAO+B,EAAa,EAAG,IAAK,GAAI,CAClC,EACA,CACE,KAAM,SACN,YAAa,wBACb,QAAS,gFAAA,eACT9B,EAAA,iBACAD,EACA,SAAU,2BACV,SAAU,MACV,MAAO+B,EAAa,EAAG,IAAK,GAAI,CAClC,EACA,CACE,KAAM,SACN,YAAa,wBACb,QAAS,gFAAA,eACT9B,EAAA,iBACAD,EACA,SAAU,2BACV,SAAU,MACV,MAAO+B,EAAa,IAAK,IAAK,GAAI,CACpC,EACA,CACE,KAAM,SACN,YAAa,gCACb,QAAS,gFAAA,eACT9B,EAAA,iBACAD,EACA,SAAU,2BACV,SAAU,MACV,MAAO+B,EAAa,EAAG,IAAK,GAAI,CAClC,EACA,CACE,KAAM,SACN,YAAa,gCACb,QAAS,gFAAA,eACT9B,EAAA,iBACAD,EACA,SAAU,2BACV,SAAU,MACV,MAAO+B,EAAa,EAAG,IAAK,GAAI,CAClC,EACA,CACE,KAAM,SACN,YAAa,gCACb,QAAS,gFAAA,eACT9B,EAAA,iBACAD,EACA,SAAU,2BACV,SAAU,MACV,MAAO+B,EAAa,IAAK,IAAK,GAAI,CAAA,CAEtC,EC9YM9B,EAA2B,CAC/B,OACA,UACA,SACA,OACA,SACA,WACA,QACF,EACMD,EAA8B,CAAC,EAExBmC,GAA+B,CAC1C,CACE,KAAM,QACN,YAAa,GACb,QACE,yFAAA,eACFlC,EAAA,iBACAD,EACA,SAAU,MACV,MAAO,CACL,CACE,KAAM,KACN,QAAS,CACP,CACE,OAAQ,CACN,KAAM,oBACN,KAAM,OACN,gBAAiB,CACnB,EACA,gBAAiB,UACjB,UAAW,UACb,EACA,CACE,OAAQ,CACN,KAAM,oBACN,KAAM,OACN,gBAAiB,EACnB,EACA,gBAAiB,SACnB,EACA,CACE,OAAQ,CACN,KAAM,oBACN,KAAM,OACN,gBAAiB,EACnB,EACA,gBAAiB,UAAA,CACnB,CACF,CAEJ,EACA,SAAU,IAAI,KAAK,qBAAqB,EAAE,YAAY,CACxD,EACA,CACE,KAAM,UACN,YAAa,GACb,QACE,yFAAA,eACFC,EAAA,iBACAD,EACA,SAAU,MACV,MAAO,CACL,CACE,KAAM,KACN,QAAS,CACP,CACE,OAAQ,CACN,KAAM,oBACN,KAAM,OACN,gBAAiB,GACnB,EACA,gBAAiB,UACjB,UAAW,UACb,EACA,CACE,OAAQ,CACN,KAAM,oBACN,KAAM,OACN,gBAAiB,EACnB,EACA,gBAAiB,SACnB,EACA,CACE,OAAQ,CACN,KAAM,oBACN,KAAM,OACN,gBAAiB,EACnB,EACA,gBAAiB,UAAA,CACnB,CACF,CAEJ,EACA,SAAU,IAAI,KAAK,qBAAqB,EAAE,YAAY,CACxD,EACA,CACE,KAAM,QACN,YAAa,GACb,QACE,yFAAA,eACFC,EAAA,iBACAD,EACA,SAAU,MACV,MAAO,CACL,CACE,KAAM,KACN,QAAS,CACP,CACE,OAAQ,CACN,KAAM,oBACN,KAAM,OACN,gBAAiB,EACnB,EACA,gBAAiB,SACnB,EACA,CACE,OAAQ,CACN,KAAM,oBACN,KAAM,OACN,gBAAiB,EACnB,EACA,gBAAiB,UAAA,CACnB,CACF,CAEJ,EACA,SAAU,IAAI,KAAK,qBAAqB,EAAE,YAAY,CAAA,CAE1D,EAEMoC,EAAmB,CACvB,UACA,QACA,KACA,KACA,OACA,OACA,SACA,OACA,OACA,WACA,OACA,OACA,OACA,OACA,OACA,OACA,SACA,SACA,QACA,QACA,WACA,OACA,MACA,UACA,KACA,MACA,SACA,OACA,SACA,WACA,OACA,KACA,WACA,YACA,MACA,UACA,QACA,OACA,UACA,OACA,OACA,OACA,MACA,MACA,KACA,KACA,KACA,MACA,KACA,KACA,MACA,KACA,OACA,MACA,OACA,OACA,MACA,OACA,OACA,OACA,OACA,OACA,KACA,OACA,OACA,QACA,cACA,aACA,SACA,UACA,QACA,QACA,OACA,OACA,QACA,WACA,OACA,OACA,KACA,MACA,MACA,MACA,OACA,MACA,OACA,SACA,MACA,OACA,OACA,UACA,OACA,MACA,YACA,OACA,WACA,MACA,oBACA,oBACA,MACA,aACA,cACA,OACA,OACA,OACA,OACA,QACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACF,EACMC,EAAoE,CACxE,OAAQ,CACN,KAAM,wBACN,KAAM,KACN,eAAgB,CAAC,CAAE,KAAM,EAAO,EAAA,CAAE,KAAM,GAAK,EAC7C,cAAe,IACf,aAAc,GAAA,CAElB,EACaC,GAA+B,CAC1C,CACE,KAAM,YACN,YAAa,GACb,QAAS,8EAAA,eACTrC,EAAA,iBACAD,EACA,SAAU,MACV,MAAO,CACL,CACE,KAAM,eACN,QAAS,CACP,CACE,OAAQ,CACN,KAAM,wBACN,KAAM,KACN,eAAgB,CAAC,CAAE,KAAM,IAAO,CAAE,KAAM,IAAO,CAAE,KAAM,IAAK,MAAO,IAAK,EACxE,cAAe,IACf,aAAc,GAChB,EACA,OAAQoC,EACR,SAAU,CAAC,MAAO,YAAa,cAAe,YAAY,CAC5D,EACA,CACE,OAAQ,CACN,KAAM,wBACN,KAAM,KACN,eAAgB,CAAC,CAAE,KAAM,IAAO,CAAE,KAAM,IAAO,CAAE,KAAM,IAAK,MAAO,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"}